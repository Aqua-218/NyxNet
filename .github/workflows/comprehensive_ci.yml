name: Comprehensive CI Matrix

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly comprehensive tests
    - cron: '0 6 * * 0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Linux testing with multiple Rust versions
  test-linux:
    name: Linux (${{ matrix.rust }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [stable, beta, nightly, 1.70.0]
        include:
          - rust: nightly
            experimental: true
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: clippy, rustfmt
    
    - name: Cache cargo registry and build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: linux-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          linux-${{ matrix.rust }}-
          linux-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcap-dev pkg-config protobuf-compiler
    
    - name: Check formatting (stable only)
      if: matrix.rust == 'stable'
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings
      continue-on-error: ${{ matrix.experimental == true }}
    
    - name: Build all crates
      run: cargo build --workspace --all-features --verbose
      continue-on-error: ${{ matrix.experimental == true }}
    
    - name: Run tests
      run: cargo test --workspace --all-features --verbose
      continue-on-error: ${{ matrix.experimental == true }}
    
    - name: Run conformance tests
      run: |
        cd nyx-conformance
        cargo test --verbose
      continue-on-error: ${{ matrix.experimental == true }}
    
    - name: Test with minimal features
      run: cargo test --workspace --no-default-features --verbose
      continue-on-error: ${{ matrix.experimental == true }}

  # Windows testing with MSVC and GNU toolchains
  test-windows:
    name: Windows (${{ matrix.toolchain }}, ${{ matrix.arch }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain: [stable-msvc, stable-gnu]
        arch: [x86_64, i686]
        exclude:
          # GNU toolchain doesn't support i686 well on GitHub Actions
          - toolchain: stable-gnu
            arch: i686
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.toolchain }}
        targets: ${{ matrix.arch }}-pc-windows-msvc
        components: clippy, rustfmt
    
    - name: Cache cargo registry and build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: windows-${{ matrix.toolchain }}-${{ matrix.arch }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          windows-${{ matrix.toolchain }}-${{ matrix.arch }}-
          windows-${{ matrix.toolchain }}-
          windows-
    
    - name: Install system dependencies
      run: |
        # Install protobuf compiler
        choco install protoc
        # Refresh PATH
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
    
    - name: Build all crates
      run: cargo build --workspace --all-features --target ${{ matrix.arch }}-pc-windows-msvc --verbose
    
    - name: Run tests
      run: cargo test --workspace --all-features --target ${{ matrix.arch }}-pc-windows-msvc --verbose
    
    - name: Test Windows-specific sandbox features
      if: matrix.arch == 'x86_64'
      run: |
        cargo test --package nyx-stream --features dynamic_plugin --target ${{ matrix.arch }}-pc-windows-msvc --verbose
    
    - name: Test CLI tools
      run: |
        cargo build --package nyx-cli --target ${{ matrix.arch }}-pc-windows-msvc --verbose
        cargo test --package nyx-cli --target ${{ matrix.arch }}-pc-windows-msvc --verbose

  # macOS testing with multiple versions
  test-macos:
    name: macOS (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-14]
        rust: [stable]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: clippy, rustfmt
        targets: x86_64-apple-darwin, aarch64-apple-darwin
    
    - name: Cache cargo registry and build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: macos-${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          macos-${{ matrix.os }}-${{ matrix.rust }}-
          macos-${{ matrix.os }}-
          macos-
    
    - name: Install system dependencies
      run: |
        brew install protobuf pkg-config
    
    - name: Build for x86_64
      run: cargo build --workspace --all-features --target x86_64-apple-darwin --verbose
    
    - name: Run tests on x86_64
      run: cargo test --workspace --all-features --target x86_64-apple-darwin --verbose
    
    - name: Build for aarch64 (Apple Silicon)
      run: cargo build --workspace --all-features --target aarch64-apple-darwin --verbose
    
    - name: Test macOS-specific sandbox features
      run: |
        cargo test --package nyx-stream --features dynamic_plugin --target x86_64-apple-darwin --verbose
    
    - name: Test OpenBSD compatibility (pledge/unveil simulation)
      run: |
        # Test that OpenBSD-specific code compiles (won't run on macOS)
        cargo check --package nyx-core --verbose

  # WebAssembly testing
  test-wasm:
    name: WebAssembly (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [wasm32-unknown-unknown, wasm32-wasi]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache cargo registry and build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: wasm-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          wasm-${{ matrix.target }}-
          wasm-
    
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    
    - name: Install wasmtime (for wasm32-wasi)
      if: matrix.target == 'wasm32-wasi'
      run: |
        curl https://wasmtime.dev/install.sh -sSf | bash
        echo "$HOME/.wasmtime/bin" >> $GITHUB_PATH
    
    - name: Build nyx-sdk-wasm
      run: |
        cd nyx-sdk-wasm
        wasm-pack build --target web --out-dir pkg
    
    - name: Build core crates for WASM
      run: |
        cargo build --package nyx-crypto --target ${{ matrix.target }} --no-default-features --verbose
        cargo build --package nyx-core --target ${{ matrix.target }} --no-default-features --verbose
        cargo build --package nyx-fec --target ${{ matrix.target }} --no-default-features --verbose
    
    - name: Test WASM compatibility
      if: matrix.target == 'wasm32-wasi'
      run: |
        cargo test --package nyx-crypto --target ${{ matrix.target }} --no-default-features
        cargo test --package nyx-core --target ${{ matrix.target }} --no-default-features
    
    - name: Validate WASM output
      run: |
        cd nyx-sdk-wasm
        ls -la pkg/
        file pkg/*.wasm

  # Cross-compilation testing
  test-cross:
    name: Cross-compile (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - x86_64-unknown-freebsd
          - x86_64-unknown-netbsd
          - aarch64-apple-darwin
          - x86_64-pc-windows-gnu
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache cargo registry and build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: cross-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          cross-${{ matrix.target }}-
          cross-
    
    - name: Install cross
      run: cargo install cross --git https://github.com/cross-rs/cross
    
    - name: Cross-compile core crates
      run: |
        cross build --package nyx-crypto --target ${{ matrix.target }} --verbose
        cross build --package nyx-core --target ${{ matrix.target }} --verbose
        cross build --package nyx-fec --target ${{ matrix.target }} --verbose
        cross build --package nyx-mix --target ${{ matrix.target }} --verbose
      continue-on-error: true

  # Feature matrix testing
  test-features:
    name: Feature Matrix (${{ matrix.features }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        features:
          - default
          - minimal
          - crypto-only
          - pq-crypto
          - dynamic-plugin
          - all-features
        include:
          - features: default
            flags: ""
          - features: minimal
            flags: "--no-default-features"
          - features: crypto-only
            flags: "--no-default-features --features classic"
          - features: pq-crypto
            flags: "--no-default-features --features kyber,hybrid"
          - features: dynamic-plugin
            flags: "--features dynamic_plugin"
          - features: all-features
            flags: "--all-features"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry and build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: features-${{ matrix.features }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          features-${{ matrix.features }}-
          features-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcap-dev pkg-config protobuf-compiler
    
    - name: Build with feature set
      run: cargo build --workspace ${{ matrix.flags }} --verbose
    
    - name: Test with feature set
      run: cargo test --workspace ${{ matrix.flags }} --verbose

  # Documentation and examples
  test-docs:
    name: Documentation and Examples
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rust-docs
    
    - name: Cache cargo registry and build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: docs-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: docs-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcap-dev pkg-config protobuf-compiler
    
    - name: Build documentation
      run: cargo doc --workspace --all-features --no-deps --verbose
    
    - name: Test documentation examples
      run: cargo test --workspace --all-features --doc --verbose
    
    - name: Check for broken links in docs
      run: |
        # Install linkchecker if available
        pip install linkchecker || true
        # Check documentation for broken links
        find target/doc -name "*.html" | head -10 | xargs -I {} sh -c 'echo "Checking {}" && grep -o "href=\"[^\"]*\"" {} | head -5 || true'

  # Performance benchmarks
  test-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry and build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: bench-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: bench-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcap-dev pkg-config protobuf-compiler
    
    - name: Run crypto benchmarks
      run: |
        cd nyx-crypto
        cargo bench --features bench || echo "Benchmarks completed"
    
    - name: Run FEC benchmarks
      run: |
        cd nyx-fec
        cargo bench || echo "FEC benchmarks completed"
    
    - name: Run transport benchmarks
      run: |
        cd nyx-transport
        cargo bench || echo "Transport benchmarks completed"

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit
    
    - name: Check for unsafe code
      run: |
        echo "Checking for unsafe code blocks..."
        if grep -r "unsafe" --include="*.rs" . | grep -v test | grep -v "/target/" | grep -v "extern \"C\""; then
          echo "Found unsafe code blocks (review required)"
          exit 1
        else
          echo "No unsafe code blocks found"
        fi

  # Final status check
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: 
      - test-linux
      - test-windows  
      - test-macos
      - test-wasm
      - test-cross
      - test-features
      - test-docs
      - test-benchmarks
      - security-audit
    if: always()
    
    steps:
    - name: Generate comprehensive report
      run: |
        echo "# Comprehensive CI Matrix Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Platform Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Linux**: ${{ needs.test-linux.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Windows**: ${{ needs.test-windows.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **macOS**: ${{ needs.test-macos.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **WebAssembly**: ${{ needs.test-wasm.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cross-compilation**: ${{ needs.test-cross.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Quality Checks" >> $GITHUB_STEP_SUMMARY
        echo "- **Feature Matrix**: ${{ needs.test-features.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Documentation**: ${{ needs.test-docs.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Benchmarks**: ${{ needs.test-benchmarks.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Audit**: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "This comprehensive CI matrix tests Nyx across:" >> $GITHUB_STEP_SUMMARY
        echo "- **4 major platforms**: Linux, Windows, macOS, WebAssembly" >> $GITHUB_STEP_SUMMARY
        echo "- **6 cross-compilation targets**: ARM64, ARMv7, FreeBSD, NetBSD, etc." >> $GITHUB_STEP_SUMMARY
        echo "- **6 feature combinations**: Default, minimal, crypto-only, PQ, plugins, all" >> $GITHUB_STEP_SUMMARY
        echo "- **Multiple Rust versions**: Stable, beta, nightly, MSRV (1.70.0)" >> $GITHUB_STEP_SUMMARY
        echo "- **Security and performance validation**" >> $GITHUB_STEP_SUMMARY
    
    - name: Check overall status
      run: |
        if [[ "${{ needs.test-linux.result }}" == "success" && 
              "${{ needs.test-windows.result }}" == "success" && 
              "${{ needs.test-macos.result }}" == "success" && 
              "${{ needs.security-audit.result }}" == "success" ]]; then
          echo "✅ Core CI matrix passed successfully"
          exit 0
        else
          echo "❌ Some CI matrix jobs failed"
          exit 1
        fi 